import numpy as np
import matplotlib.pyplot as plt

def f(x, y):
    return x / y  # ODE: dy/dx = x / y

def runge_kutta_4(f, x0, y0, h, steps):
    """Runge-Kutta 4th order method to generate initial values."""
    x_values = [x0]
    y_values = [y0]

    for _ in range(steps):
        k1 = h * f(x0, y0)
        k2 = h * f(x0 + h / 2, y0 + k1 / 2)
        k3 = h * f(x0 + h / 2, y0 + k2 / 2)
        k4 = h * f(x0 + h, y0 + k3)

        y0 = y0 + (k1 + 2 * k2 + 2 * k3 + k4) / 6
        x0 = x0 + h

        x_values.append(x0)
        y_values.append(y0)

    return x_values, y_values

def adams_bashforth_3(f, x_values, y_values, h, steps):
    """Adams-Bashforth 3rd order method."""
    for i in range(steps):
        x_n, y_n = x_values[-1], y_values[-1]
        x_n1, y_n1 = x_values[-2], y_values[-2]
        x_n2, y_n2 = x_values[-3], y_values[-3]

        f_n = f(x_n, y_n)
        f_n1 = f(x_n1, y_n1)
        f_n2 = f(x_n2, y_n2)

        y_next = y_n + (h / 12) * (23 * f_n - 16 * f_n1 + 5 * f_n2)
        x_next = x_n + h

        x_values.append(x_next)
        y_values.append(y_next)

    return x_values, y_values

# Parameters
x0 = 1  # Initial x value
y0 = 3  # Initial y value
h = 0.2  # Step size
rk_steps = 3  # Number of RK4 steps to generate initial values
ab_steps = 7  # Number of additional steps using Adams-Bashforth

# Step 1: Generate initial values using RK4
x_rk, y_rk = runge_kutta_4(f, x0, y0, h, rk_steps)

# Step 2: Use Adams-Bashforth method for further steps
x_ab, y_ab = adams_bashforth_3(f, x_rk, y_rk, h, ab_steps)

# Plot the solution
plt.figure(figsize=(8, 6))
plt.plot(x_ab, y_ab, marker='o', label='Adams-Bashforth Method')
plt.title("Numerical Solution of dy/dx = x/y")
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()
plt.show()
